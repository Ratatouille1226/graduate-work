import { Link } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { selectAccounts } from '../../selectors';
import { fetchAccounts, addNewAccounts } from '../../redux-thunk';
import { deleteAccounts } from '../../redux-thunk/delete-accounts';

import { Loader } from '../loader/Loader';
import { SliceSentence } from '../../utils';

import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';

import styles from './accounts.module.css';

const validationSchema = yup.object().shape({
	accountName: yup
		.string()
		.required('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞')
		.matches(/^[–∞-—è—ë-]+$/i, '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—á—ë—Ç–∞ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞-—è –∏ –¥–µ—Ñ–∏—Å'),
	balance: yup
		.string()
		.required('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—É –Ω–∞ —Å—á—ë—Ç–µ')
		.matches(/^[0-9]+$/, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'),
	cashback: yup
		.string()
		.required('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—É –Ω–∞ —Å—á—ë—Ç–µ')
		.matches(/^[0-9]+$/, '–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'),
});

export const Accounts = () => {
	const {
		register,
		reset,
		handleSubmit,
		formState: { errors },
	} = useForm({
		defaultValues: {
			accountName: '',
			balance: '',
			cashback: '',
		},
		resolver: yupResolver(validationSchema),
	});

	const dispatch = useDispatch();
	const { accounts, loading, addLoadingNewAccounts } = useSelector(selectAccounts);
	const [isNewAddAccounts, setIsNewAddAccounts] = useState(true); // –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	const [refreshAccounts, setRefreshAccounts] = useState(false); // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
	useEffect(() => {
		dispatch(fetchAccounts());
	}, [refreshAccounts, dispatch]);

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞
	const onAddAccounts = async (formData) => {
		dispatch(
			addNewAccounts({
				account: formData.accountName, // üí° –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
				balance: formData.balance,
				cashback: formData.cashback,
			}),
		).then(() => {
			setIsNewAddAccounts(true); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–æ–∫ "–î–æ–±–∞–≤–∏—Ç—å"
			reset();
		}); // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	};
	//–£–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
	const onDeleteAccount = async (id) => {
		dispatch(deleteAccounts(id));
		setRefreshAccounts((prev) => !prev);
	};

	//–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	const formErrorAccount = errors?.accountName?.message;
	const formErrorBalance = errors?.balance?.message;
	const formErrorCashback = errors?.cashback?.message;

	return (
		<div className={styles['container']}>
			<h2>–í–∞—à–∏ —Å—á–µ—Ç–∞</h2>
			<div className={styles['wrapper']}>
				{loading ? (
					<Loader />
				) : (
					<div className={styles['block']}>
						{accounts.map((item) => (
							<div key={item.id} className={styles['block__accounts']}>
								<div className={styles['accounts']}>
									<h2>
										<SliceSentence text={item.account} maxLength={10} />
									</h2>
									<span>
										<SliceSentence
											text={item.balance}
											maxLength={9}
											prefix={'–°—á–µ—Ç:'}
											suffix={'—Ä'}
										/>
										<Link to={`/accountPage/${item.id}`}>
											<i className={`fa-solid fa-pen-to-square ${styles['edit']}`}></i>
										</Link>
									</span>
									<span>
										<SliceSentence
											text={item.cashback}
											maxLength={9}
											prefix={'–ö—ç—à–±–µ–∫:'}
											suffix={'—Ä'}
										/>
									</span>
									<span>
										<i className={`fa-solid fa-piggy-bank ${styles['pig']}`}></i>
									</span>
									<button onClick={() => onDeleteAccount(item.id)} className={styles['delete']}>
										–£–¥–∞–ª–∏—Ç—å
									</button>
								</div>
							</div>
						))}

						<div
							onClick={() => {
								if (isNewAddAccounts) setIsNewAddAccounts(false);
							}}
							className={styles['add__new-block']}
						>
							{isNewAddAccounts ? (
								<>
									<span>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç</span>
									<span>
										<i className="fa-regular fa-square-plus"></i>
									</span>
								</>
							) : addLoadingNewAccounts ? (
								<Loader /> // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ä–º—ã
							) : (
								<form
									onClick={(e) => e.stopPropagation()}
									onSubmit={handleSubmit(onAddAccounts)} // –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
								>
									<input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞" {...register('accountName')} />
									{formErrorAccount && <p className={styles['account__error']}>{formErrorAccount}</p>}
									<input placeholder="–°—É–º–º–∞ –Ω–∞ —Å—á–µ—Ç—É" {...register('balance')} />
									{formErrorBalance && <p className={styles['account__error']}>{formErrorBalance}</p>}
									<input placeholder="–ö—ç—à–±–µ–∫–∞ –Ω–∞ —Å—á–µ—Ç—É" {...register('cashback')} />
									{formErrorCashback && (
										<p className={styles['account__error']}>{formErrorCashback}</p>
									)}
									<button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button>
								</form>
							)}
						</div>
					</div>
				)}
			</div>
		</div>
	);
};
